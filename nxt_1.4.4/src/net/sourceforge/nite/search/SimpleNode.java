/* Generated By:JJTree: Do not edit this line. SimpleNode.java */
package net.sourceforge.nite.search;

/**
 * Generated by the
 * <a href="http://www.webgain.com/products/java_cc/" target="_blank">JavaCC</a>
 * tool JJTree.
 *
 * Not abstract but used as the abstract class of all parser nodes
 * (with name prefix "Node").
 */
public class SimpleNode implements Node {
  /** the parent node */
  protected Node parent;
  /** all children nodes */
  protected Node[] children;
  protected int id;
  protected Parser parser;

////manual added start
  public String image;
////manual added end

  public SimpleNode(int i) { id = i; }

  public SimpleNode(Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {}

  public void jjtClose() {}

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

	/**
	 * New method for use in rewriter. Note this does not have the 'jjt' prefix
	 * as it is not automatically generated.
	 */
	public Node[] getChildren() {return children;}


  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return ParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

////manual added start
  public String dump(String prefix) {
      String ret = toString(prefix) + "\n";
      if (children != null) {
          for (int i = 0; i < children.length; ++i) {
              SimpleNode n = (SimpleNode)children[i];
              if (n != null) {
                  ret += n.dump(prefix + "   ");
              }
          }
      }
      return ret;
  }
    ////manual added end
    
}

