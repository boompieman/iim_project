package net.sourceforge.nite.search;

import java.util.*;

/* Generated By:JJTree: Do not edit this line. NodeSimpleQuery.java */

/**
 * Generated by the
 * <a href="http://www.webgain.com/products/java_cc/" target="_blank">JavaCC</a>
 * tool JJTree.
 */
public class NodeSimpleQuery extends SimpleNode {
    public NodeSimpleQuery(int id) {
	super(id);
    }

    public NodeSimpleQuery(Parser p, int id) {
	super(p, id);
    }

    ////////////////////////////////////////////////
    private Hashtable variables     = new Hashtable();
    private List      currentTypes;
    public  Vector    varList       = new Vector();

    private List exists = new Vector(),
	forAll = new Vector(),
	names  = new Vector(),
	types  = new Vector();

    public void addVar(String name, boolean isExists, boolean isForAll)
    {
	Vector typesField = new Vector();
	currentTypes      = typesField;
	variables.put(name, typesField);
	varList.add( name );

	exists.add( new Boolean(isExists) );
	forAll.add( new Boolean(isForAll) );
	names.add(name);
	types.add(typesField);
    }
    public void addType(String name) { currentTypes.add(name); }

    public Hashtable getVariables() { return variables; }

    public List    getVarNames() { return names; }
    public boolean isExists(String varName)
    {
	try {
	    return ((Boolean)exists.get( names.indexOf(varName) )).booleanValue();
	} catch (Exception e) { return false; }
    }
    public boolean isForAll(String varName)
    {
	try {
	    return ((Boolean)forAll.get( names.indexOf(varName) )).booleanValue();
	} catch (Exception e) { return false; }
    }
    public List getTypes(String varName)
    {
	try {
	    return (List)types.get( names.indexOf(varName) );
	} catch (Exception e) { return null; }
    }

    /** 
     * Get a list of the variables which are existentially quantified.
     * This is a new method for use by the QueryRewriter class.
     * UNIMPLEMENTED
     * 
     * @return an array of ints representing the indices 
     * of the variables which had exists quantifiers.
     * @author nmayo@inf.ed.ac.uk
     */
    //public int[] resetExists() {
    //    int ids = new int[];
    //}
    public List getExists() {return exists;}

    public String dump(String prefix) {
	String ret;
	String plus = "";
	if (variables.size() > 0) {
	    plus = " - ";
	    for (Enumeration e=variables.keys(); e.hasMoreElements(); ) {
		String v = e.nextElement().toString();
		if (isExists(v)) plus += " EXISTS ";
		if (isForAll(v)) plus += " FORALL ";
		plus += v;
		List l = (List)variables.get(v);
		if (l.size() > 0) { plus += "("; }
		// print var types
		for (Iterator f=l.iterator(); f.hasNext(); ) {
		    plus += f.next().toString();
		    if ( f.hasNext() ) { plus += ", "; };
		}
		if (l.size() > 0) { plus += ")"; }
		if ( e.hasMoreElements() ) { plus += " - "; };
	    }
	}

	ret = toString(prefix) + plus + "\n";

	if (children != null) {
	    for (int i = 0; i < children.length; ++i) {
		SimpleNode n = (SimpleNode)children[i];
		if (n != null) {
		    ret += n.dump(prefix + "   ");
		}
	    }
	}
	//System.out.println("forAll:\n"+forAll);
	//System.out.println("exists:\n"+exists);

	return ret;
    }


}
