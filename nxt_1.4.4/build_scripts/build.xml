<?xml version="1.0"?>
<!--
  Builds class files and puts a new 'nxt.jar' in the lib directory. 
  Builds javadoc.

  This is useful for building from the source-only distribution.
 -->
<project name="nite" default="dist">

	<!-- Important directories, relative to project root. -->
	<property name="source.dir" value="src"/>
	<property name="build.dir" value="bin"/>
	<property name="doc.dir" value="apidoc"/>
	<property name="lib.dir" value="lib"/>
	<property name="script.dir" value="."/>

	<!-- Name of the output JAR file. -->
	<property name="jar.file" value="${lib.dir}/nxt.jar"/>
	
	<!-- 
		Distribution.
	-->
	<target name="dist"
		depends="init, clean, jar, scripts, javadoc"
		description="Builds the sources into a jar.">
	</target>
	
	
	<!-- Initialization. -->
	<target name="init">
		<!-- Set time and date stamp properties. -->
		<tstamp/>
		
		<!-- Make sure directory structure is complete. -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${doc.dir}"/>
	</target>
	
	<!-- Compile classes.	-->
	<target name="classes" description="Compiles all Java classes">
		<javac	srcdir="${source.dir}"
				destdir="${build.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
				<fileset dir="${lib.dir}">
		        	<include name="*.jar"/>
		      	</fileset>	
		      	<fileset dir="${lib.dir}/JMF/lib">
		        	<include name="*.jar"/>
		      	</fileset>		
			</classpath>
		</javac>	
	</target>
	
	
	<!--
		Distribution JAR file.
	-->
	<target name="jar"
			depends="classes"
			description="Produces project JAR files">
		
		<!-- Make the jar. -->
		<jar destfile="${jar.file}"
				basedir="${build.dir}"/>
									
	</target>
	
	
	
	<!--
		Generate multi-platform runner scripts.
	-->
	<target name="scripts"
			description="Generate command line scripts.">
		
		<antcall target="_script">
			<param name="script.name" value="search"/>
			<param name="script.class" value="net.sourceforge.nite.search.GUI"/>
		</antcall>
	
		<!-- Fix EOL characters in generated scripts. -->
		<fixcrlf srcdir="." eol="crlf" includes="*.bat"/>
		<fixcrlf srcdir="." eol="lf" includes="*.sh"/>
		<fixcrlf srcdir="." eol="lf" includes="*.command"/>

                <!-- fix permissions -->
                <chmod file="${script.dir}\*.command" perm="a+x" />		
                <chmod file="${script.dir}\*.sh" perm="a+x" />		
	</target>


	<!--
		Generate javadoc.
	-->
	<target name="javadoc"
			description="Generates API documentation.">
		<javadoc	
				destdir="apidoc"
				access="public"
				source="1.5"
				sourcepath="${source.dir}"
				packagenames = "net.sourceforge.nite.*"
				>
            <group title="Core" packages="net.sourceforge.nite.meta*:net.sourceforge.nite.nom*:net.sourceforge.nite.nxt*:net.sourceforge.nite.time*:net.sourceforge.nite.util*"/>
            <group title="Search" packages="net.sourceforge.nite.query*:net.sourceforge.nite.search*"/>
            <group title="Data inspection and reliability" packages="net.sourceforge.nite.datainspection*"/>
            <group title="GUI" packages="net.sourceforge.nite.gui*"/>
            <group title="Stylesheet processing" packages="net.sourceforge.nite.nstyle*"/>
            <group title="Configurable annotation tools" packages="net.sourceforge.nite.tools*"/>
            <group title="AMI" packages="net.sourceforge.nite.ami*"/>
			<classpath>
						
			</classpath>
			
		</javadoc>	
	</target>


	<!--
		Clean output dirs.
	-->
	<target name="clean"
			description="Removes files generated by build process">

		<!--
			Note the use of includeEmptyDirs, combined with
			**/*. This makes ant delete everything under
			the target dir, while leaving it intact.
			Equivalent to: rm -rf DIR/*
		-->

		<!-- Nuke the class files. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
		
		<!-- Nuke the javadoc. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${doc.dir}" includes="**/*"/>
		</delete>

		<!-- Goodbye project jar files. -->
		<delete verbose="true" file="${jar.file}"/>
	</target>

	<target name="tidy"
			description="Removes class and JAR files generated by build process, but not javadoc">

		<!--
			Note the use of includeEmptyDirs, combined with
			**/*. This makes ant delete everything under
			the target dir, while leaving it intact.
			Equivalent to: rm -rf DIR/*
		-->

		<!-- Nuke the class files. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
		
		<!-- Goodbye project jar files. -->
		<delete verbose="true" file="${jar.file}"/>
 	        <delete verbose="true" file="${nehelp.jar.file}"/>
 	        <delete verbose="true" file="${dahelp.jar.file}"/>
 	        <delete verbose="true" file="${testhelp.jar.file}"/>
 	        <delete verbose="true" file="${vidhelp.jar.file}"/>

		<!-- Goodbye compiled samples. -->
		<delete verbose="true">
			<fileset dir="${lib.dir}" includes="*.class"/>
		</delete>
		
		<!-- And scripts. -->
		<delete verbose="true">
			<fileset dir="${script.dir}">
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="*.command"/>
			</fileset>
		</delete>
		
	</target>


	<!--
		Internal target which produces a runner scripts for
		Win32 and Unix. The basename of the script is taken
		from the script.name parameter. The class to run
		comes from script.class parameter. The scripts are
		placed in the script.dir directory.				
	-->
	<target name="_script">
		
		<echo message="Generating script: ${script.name}"/>
	
		<echo file="${script.dir}/${script.name}.bat">@echo off
rem Generated by ant, ${TODAY}.
rem Note that a Java runtime should be on the path.
rem The current directory should be root of the ${zip.basename} install.

java -Xms128m -Xmx1024m -cp lib;lib/nxt.jar;lib/jdom.jar;lib/JMF/lib/jmf.jar;lib/pnuts.jar;lib/resolver.jar;lib/xalan.jar;lib/xercesImpl.jar;lib/xml-apis.jar;lib/jmanual.jar;lib/jh.jar;lib/helpset.jar;lib/poi.jar;lib/eclipseicons.jar;lib/icons.jar;lib/forms.jar;lib/looks.jar;lib/necoderHelp.jar;lib/videolabelerHelp.jar;lib/dacoderHelp.jar;lib/testcoderHelp.jar;lib/prefuse.jar ${script.class} %*
		</echo>
		
		<echo file="${script.dir}/${script.name}.sh">#!/bin/bash
# Generated by ant, ${TODAY}
# Note that a Java runtime should be on the path.
# The current directory should be root of the ${zip.basename} install.
# unless you edit this variable to contain the path to your install
# then you can run from anywhere.
NXT="."

# Adjust classpath for running under cygwin.
if [ $OSTYPE = 'cygwin' ]; then
	export CLASSPATH=".;$NXT;$NXT/lib;$NXT/lib/nxt.jar;$NXT/lib/jdom.jar;$NXT/lib/JMF/lib/jmf.jar;$NXT/lib/pnuts.jar;$NXT/lib/resolver.jar;$NXT/lib/xalan.jar;$NXT/lib/xercesImpl.jar;$NXT/lib/xml-apis.jar;$NXT/lib/jmanual.jar;$NXT/lib/jh.jar;$NXT/lib/helpset.jar;$NXT/lib/poi.jar;$NXT/lib/eclipseicons.jar;$NXT/lib/icons.jar;$NXT/lib/forms.jar;$NXT/lib/looks.jar;$NXT/lib/necoderHelp.jar;$NXT/lib/videolabelerHelp.jar;$NXT/lib/dacoderHelp.jar;$NXT/lib/testcoderHelp.jar;$NXT/lib/prefuse.jar"
else
	export CLASSPATH=".:$NXT:$NXT/lib:$NXT/lib/nxt.jar:$NXT/lib/jdom.jar:$NXT/lib/JMF/lib/jmf.jar:$NXT/lib/pnuts.jar:$NXT/lib/resolver.jar:$NXT/lib/xalan.jar:$NXT/lib/xercesImpl.jar:$NXT/lib/xml-apis.jar:$NXT/lib/jmanual.jar:$NXT/lib/jh.jar:$NXT/lib/helpset.jar:$NXT/lib/poi.jar:$NXT/lib/eclipseicons.jar:$NXT/lib/icons.jar:$NXT/lib/forms.jar:$NXT/lib/looks.jar:$NXT/lib/necoderHelp.jar:$NXT/lib/videolabelerHelp.jar:$NXT/lib/dacoderHelp.jar:$NXT/lib/testcoderHelp.jar:$NXT/lib/prefuse.jar"
fi

java -Xms128m -Xmx1024m ${script.class}
		</echo>
		<echo file="${script.dir}/${script.name}.command">#!/bin/bash
# Generated by ant, ${TODAY}
# Note that a Java runtime should be on the path.
# The current directory should be root of the ${zip.basename} install.
# unless you edit this variable to contain the path to your install
# then you can run from anywhere.

# this magic incantation changes to the directory we're running from
cd "${0%/*}"

NXT="."
FMJHOME="$NXT/lib/fmj"

FMJJARS="$FMJHOME:$FMJHOME/fmj.jar:$FMJHOME/lib:$FMJHOME/lib/jdom.jar:$FMJHOME/lib/jffmpeg-1.1.0.jar:$FMJHOME/lib/jl1.0.jar:$FMJHOME/lib/jogg-0.0.7.jar:$FMJHOME/lib/jorbis-0.0.15.jar:$FMJHOME/lib/lti-civil.jar:$FMJHOME/lib/mp3spi1.9.4.jar:$FMJHOME/lib/tritonus_share.jar:$FMJHOME/lib/vorbisspi1.0.2.jar"

export CLASSPATH=".:$NXT:$NXT/lib:$NXT/lib/nxt.jar:$NXT/lib/pnuts.jar:$NXT/lib/resolver.jar:$NXT/lib/xalan.jar:$NXT/lib/xercesImpl.jar:$NXT/lib/xml-apis.jar:$NXT/lib/jmanual.jar:$NXT/lib/jh.jar:$NXT/lib/helpset.jar:$NXT/lib/poi.jar:$NXT/lib/eclipseicons.jar:$NXT/lib/icons.jar:$NXT/lib/forms.jar:$NXT/lib/looks.jar:$NXT/lib/necoderHelp.jar:$NXT/lib/videolabelerHelp.jar:$NXT/lib/dacoderHelp.jar:$NXT/lib/testcoderHelp.jar:$NXT/lib/prefuse.jar:$FMJJARS"

java -Xms128m -Xmx512m -Djava.library.path="$FMJHOME" ${script.class}

		</echo>
	
	</target>

</project>
