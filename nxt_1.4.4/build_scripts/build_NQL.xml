<?xml version="1.0"?>
<!--
        Jonathan Kilgour 13/11/03 - based on Dominic Seymour's
        original.

	Builds class files, javadoc and jar for NQL search module.
        Only incorporates the NOM, metadata and search packages.
        Produces zip files containing binaries-only and source-only
        distributions of the project.
-->
<project name="nql" default="dist">

	<!-- Important directories, relative to project root. -->
	<property name="mainsource.dir" value="src"/>
	<property name="source.dir" value="src/net/sourceforge/nite/search"/>
	<property name="source2.dir" value="src/net/sourceforge/nite/nom"/>
	<property name="source3.dir" value="src/net/sourceforge/nite/meta"/>
	<property name="build.dir" value="bin"/>
	<property name="doc.dir" value="apidoc"/>
	<property name="lib.dir" value="lib"/>
	<property name="script.dir" value="."/>

	<!-- Name of the output JAR file. -->
	<property name="jar.file" value="${lib.dir}/nql.jar"/>
	
	<!--
		Base name of the distribution zip file.
		This will expanded as in "nql-200303111511.zip".
		This is the current date and time concatenated
	-->
	<property name="zip.basename" value="nql"/>

	<!-- 
		Distribution.
	-->
	<target name="dist"
		depends="init, clean, jar, scripts, javadoc"
		description="Produces distribution zip files.">
		
		<!--
			All work will be done while satisfying
			this target's dependencies.
		-->
	</target>
	
	
	<!-- Initialization. -->
	<target name="init">
	
		<!-- Set time and date stamp properties. -->
		<tstamp/>
		
		<!-- Make sure directory structure is complete. -->
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${doc.dir}"/>
		
	</target>
	
	<!-- Compile classes.	-->
	<target name="classes" description="Compiles all Java classes">
<!--		<javac	srcdir="${mainsource.dir}" -->
		<javac
				destdir="${build.dir}"
				source= "1.5">
                        <src path="${source.dir}"/>
                        <src path="${source2.dir}"/>
                        <src path="${source3.dir}"/>
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
                          <!-- NO JMF NEEDED! -->
			</classpath>
		</javac>	


	</target>
	
	
	<!--
		Distribution JAR file.
	-->
	<target name="jar"
			depends="classes"
			description="Produces project JAR files">
		
		<!-- Make the jar. -->
		<jar destfile="${jar.file}"
				basedir="${build.dir}"/>
									
	</target>
	
	
	
	<!--
		Generate multi-platform runner scripts.
	-->
	<target name="scripts"
			description="Generate command line scripts.">

		<antcall target="_script">
			<param name="script.name" value="search"/>
			<param name="script.class" value="net.sourceforge.nite.search.GUI"/>
		</antcall>
	
	
		<!-- Fix EOL characters in generated scripts. -->
		<fixcrlf srcdir="." eol="crlf" includes="*.bat"/>
		<fixcrlf srcdir="." eol="lf" includes="*.sh"/>
	</target>

	<!--
		Generate javadoc.
	-->
	<target name="javadoc"
			description="Generates API documentation.">
		<javadoc	
			 sourcepath="${mainsource.dir}"
			 packagenames="net.sourceforge.nite.search,net.sourceforge.nite.nom,net.sourceforge.nite.meta"
			 destdir="apidoc"
			 access="public"
			 source="1.5"
			 >
			<classpath>
			</classpath>
		</javadoc>	
	</target>


	<!--
		Clean output dirs.
	-->
	<target name="clean"
			description="Removes files generated by build process">

		<!--
			Note the use of includeEmptyDirs, combined with
			**/*. This makes ant delete everything under
			the target dir, while leaving it intact.
			Equivalent to: rm -rf DIR/*
		-->

		<!-- Nuke the class files. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${build.dir}" includes="**/*"/>
		</delete>
		
		<!-- Nuke the javadoc. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${doc.dir}" includes="**/*"/>
		</delete>
		
		<!-- Goodbye project jar files. -->
		<delete verbose="true" file="${jar.file}"/>
		
		<!-- And scripts. -->
		<delete verbose="true">
			<fileset dir="${script.dir}">
				<include name="*.bat"/>
				<include name="*.sh"/>
			</fileset>
		</delete>
		
	</target>


	<!--
		Internal target which produces a runner scripts for
		Win32 and Unix. The basename of the script is taken
		from the script.name parameter. The class to run
		comes from script.class parameter. The scripts are
		placed in the script.dir directory.				
	-->
	<target name="_script">
		
		<echo message="Generating script: ${script.name}"/>
	
		<echo file="${script.dir}/${script.name}.bat">@echo off
rem Generated by ant, ${TODAY}.
rem Note that a Java runtime should be on the path.
rem The current directory should be root of the ${zip.basename} install.

java -Xms128m -Xmx1024m -cp lib;lib/nql.jar;lib/jdom.jar;lib/pnuts.jar;lib/resolver.jar;lib/xalan.jar;lib/xercesImpl.jar;lib/xml-apis.jar;lib/jmanual.jar;lib/jh.jar;lib/helpset.jar;lib/poi.jar;lib/parlevink.jar ${script.class} %*
		</echo>
		
		<echo file="${script.dir}/${script.name}.sh">#!/bin/bash
# Generated by ant, ${TODAY}
# Note that a Java runtime should be on the path.
# The current directory should be root of the ${zip.basename} install.
# unless you edit this variable to contain the path to your install
# then you can run from anywhere.
NXT="."

# Adjust classpath for running under cygwin.
if [ $OSTYPE = 'cygwin' ]; then
	export CLASSPATH=".;$NXT;$NXT/lib;$NXT/lib/nxt.jar;$NXT/lib/jdom.jar;$NXT/lib/JMF/lib/jmf.jar;$NXT/lib/pnuts.jar;$NXT/lib/resolver.jar;$NXT/lib/xalan.jar;$NXT/lib/xercesImpl.jar;$NXT/lib/xml-apis.jar;$NXT/lib/jmanual.jar;$NXT/lib/jh.jar;$NXT/lib/helpset.jar;$NXT/lib/poi.jar;$NXT/lib/parlevink.jar"
else
	export CLASSPATH=".:$NXT:$NXT/lib:$NXT/lib/nxt.jar:$NXT/lib/jdom.jar:$NXT/lib/JMF/lib/jmf.jar:$NXT/lib/pnuts.jar:$NXT/lib/resolver.jar:$NXT/lib/xalan.jar:$NXT/lib/xercesImpl.jar:$NXT/lib/xml-apis.jar:$NXT/lib/jmanual.jar:$NXT/lib/jh.jar:$NXT/lib/helpset.jar:$NXT/lib/poi.jar:$NXT/lib/parlevink.jar"
fi

java -Xms128m -Xmx1024m ${script.class}
		</echo>
	
	</target>

</project>
