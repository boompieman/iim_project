<?xml version="1.0"?>
<!--
	
	Simple ant file for Java projects.
	
	Builds data, media and startup scripts for standalone corpora
	examples. These are now separate because media files are
	large. You end up with a zip file for each corpus.

        Preconditions: make sure appropriate media is contained in the
        'signals' subdirectory for each corpus: these will not be
        stored in CVS so this is a manual step.

        Postconditions: the zips must be unzipped into the main NXT
        install directory or they won't work: they use relative paths.

	Jonathan Kilgour
-->
<project name="samples" default="dist">
	<property name="build.dir" value="."/>
	<property name="lib.dir" value="lib"/>
	<property name="samples.dir" value="samples"/>
	<property name="data.dir" value="Data"/>
	<property name="ami.dir" value="Data/AMI"/>
	<property name="maptask.dir" value="Data/Maptask"/>
	<property name="monitor.dir" value="Data/Monitor"/>
	<property name="icsi.dir" value="Data/ICSI"/>
	<property name="switchboard.dir" value="Data/Switchboard"/>
	<property name="script.dir" value="."/>

	<!-- Name of the output ZIP files. -->
	<property name="ami.zip.file" value="ami.zip"/>
	<property name="maptask.zip.file" value="maptask.zip"/>
	<property name="icsi.zip.file" value="icsi.zip"/>
	<property name="monitor.zip.file" value="monitor.zip"/>
	<property name="switchboard.zip.file" value="switchboard.zip"/>

	<!-- 
		Build corpus samples distribution.
	-->
	<target name="dist"
		depends="init, clean, zip"
		description="Produces distribution zip files for corpus samples.">
	</target>
	
	
	<!-- Initialization. -->
	<target name="init">
	
		<!-- Set time and date stamp properties. -->
		<tstamp/>
		
	</target>

	<!--
		Clean output dir.
	-->
	<target name="clean" description="Removes files generated by build process">

		<!-- Delete the zip files. -->
		<delete includeEmptyDirs="true" verbose="true">
			<fileset dir="${build.dir}" includes="${ami.zip.file},${maptask.zip.file},${icsi.zip.file},${monitor.zip.file},${switchboard.zip.file}"/>
			<fileset dir="${build.dir}" includes="ami.*,maptask.*,icsi.*,monitor.*,switchboard.*"/>
		</delete>
	</target>

	
	<!-- Compile classes.	-->
	<target name="classes" description="Compiles all corpus-specific Java classes into the lib directory (e.g. delegate classes for text display / sample programs)">
		<javac	srcdir="${ami.dir}/src"
				destdir="${lib.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
		      	  <fileset dir="${lib.dir}/JMF/lib">
		            <include name="*.jar"/>
		      	  </fileset>		
			</classpath>
		</javac>	

		<javac	srcdir="${icsi.dir}/src"
				destdir="${lib.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
		      	  <fileset dir="${lib.dir}/JMF/lib">
		            <include name="*.jar"/>
		      	  </fileset>		
			</classpath>
		</javac>	

		<javac	srcdir="${maptask.dir}/src"
				destdir="${lib.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
		      	  <fileset dir="${lib.dir}/JMF/lib">
		            <include name="*.jar"/>
		      	  </fileset>		
			</classpath>
		</javac>	

		<javac	srcdir="${monitor.dir}/src"
				destdir="${lib.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
		      	  <fileset dir="${lib.dir}/JMF/lib">
		            <include name="*.jar"/>
		      	  </fileset>		
			</classpath>
		</javac>	


		<javac	srcdir="${switchboard.dir}/src"
				destdir="${lib.dir}"
				source= "1.5"
				target= "1.5">
			<classpath>
			  <fileset dir="${lib.dir}">
		            <include name="*.jar"/>
		      	  </fileset>	
		      	  <fileset dir="${lib.dir}/JMF/lib">
		            <include name="*.jar"/>
		      	  </fileset>		
			</classpath>
		</javac>	


	</target>

	<!--
		Distribution ZIP files.
	-->
	<target name="zip" description="Produces corpus-samples distribution zip files." 
                depends="classes, scripts">
		
		<!-- Make the AMI corpus zip file. -->
		<zip destfile="${ami.zip.file}">
			<zipfileset prefix="${ami.dir}" dir="${ami.dir}"/>
			<zipfileset prefix="${lib.dir}" dir="${lib.dir}">
				<include name="AMI*.class"/>
			</zipfileset>
			<zipfileset dir="." filemode="755">
				<include name="ami*"/>
			</zipfileset>
                </zip>

		<!-- Make the ICSI corpus zip file. -->
		<zip destfile="${icsi.zip.file}">
			<zipfileset prefix="${icsi.dir}" dir="${icsi.dir}"/>
			<zipfileset prefix="${lib.dir}" dir="${lib.dir}">
				<include name="ICSI*.class"/>
			</zipfileset>
			<zipfileset dir="." filemode="755">
				<!-- Lack of prefix attr here assumes "." -->
				<include name="icsi.*"/>
			</zipfileset>
                </zip>

		<!-- Make the Maptask corpus zip file. -->
		<zip destfile="${maptask.zip.file}">
			<zipfileset prefix="${maptask.dir}" dir="${maptask.dir}"/>
			<zipfileset prefix="${lib.dir}" dir="${lib.dir}">
				<include name="Maptask*.class"/>
			</zipfileset>
			<zipfileset dir="." filemode="755">
				<!-- Lack of prefix attr here assumes "." -->
				<include name="maptask.*"/>
			</zipfileset>
                </zip>

		<!-- Make the Monitor corpus zip file. -->
		<zip destfile="${monitor.zip.file}">
			<zipfileset prefix="${monitor.dir}" dir="${monitor.dir}"/>
			<zipfileset prefix="${lib.dir}" dir="${lib.dir}">
				<include name="Monitor*.class"/>
			</zipfileset>
			<zipfileset dir="." filemode="755">
				<!-- Lack of prefix attr here assumes "." -->
				<include name="monitor.*"/>
			</zipfileset>
                </zip>

		<!-- Make the Switchboard corpus zip file. -->
		<zip destfile="${switchboard.zip.file}">
			<zipfileset prefix="${switchboard.dir}" dir="${switchboard.dir}"/>
			<zipfileset prefix="${lib.dir}" dir="${lib.dir}">
				<include name="Switchboard*.class"/>
			</zipfileset>
			<zipfileset dir="." filemode="755">
				<!-- Lack of prefix attr here assumes "." -->
				<include name="switchboard.*"/>
			</zipfileset>
                </zip>
	</target>
	
	
	<!--
		Generate multi-platform runner scripts.
	-->
	<target name="scripts"
			description="Generate command line scripts.">
		
		<antcall target="_script">
			<param name="script.name" value="maptask"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/Maptask/maptask.xml"/>		
		</antcall>

		<antcall target="_script">
			<param name="script.name" value="monitor"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/Monitor/monitor.xml"/>
		</antcall>

		<antcall target="_script">
			<param name="script.name" value="switchboard"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/Switchboard/swbd-metadata.xml"/>
		</antcall>

		<antcall target="_script">
			<param name="script.name" value="ami"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/AMI/ami.xml"/>		
		</antcall>

		<antcall target="_script">
			<param name="script.name" value="ami_timeline"/>
                        <!-- I suppose it's a bit hacky to put the Java property there.. -->
			<param name="script.class" value="-DNXT_RESOURCES_ALWAYS_ASK SimpleTimelineDisplay -corpus Data/AMI/ami.xml -config configuration/amiNSConfig.xml -displayelement movement -textattribute type -observation ES2008a"/>
		</antcall>

		<antcall target="_script">
			<param name="script.name" value="icsi"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/ICSI/icsi.xml"/>		
		</antcall>

<!-- not sure..
		<antcall target="_script">
			<param name="script.name" value="smartkom"/>
			<param name="script.class" value="net.sourceforge.nite.nxt.GUI -corpus Data/meta/smartkom-metadata.xml"/>		
		</antcall>
-->

		<!-- Fix EOL characters in generated scripts. -->
		<fixcrlf srcdir="." eol="crlf" includes="*.bat"/>
		<fixcrlf srcdir="." eol="lf" includes="*.sh"/>
		<fixcrlf srcdir="." eol="lf" includes="*.command"/>

                <!-- fix permissions -->
                <chmod file="${script.dir}\*.command" perm="a+x" />		
                <chmod file="${script.dir}\*.sh" perm="a+x" />		
	</target>


	<!--
		Internal target which produces a runner scripts for
		Win32, Unix and Mac. The basename of the script is taken
		from the script.name parameter. The class to run
		comes from script.class parameter. The scripts are
		placed in the script.dir directory.				
	-->
	<target name="_script">
		
		<echo message="Generating script: ${script.name}"/>
	
		<echo file="${script.dir}/${script.name}.bat">@echo off
rem Generated by ant, ${TODAY}.
rem Note that a Java runtime should be on the path.
rem The current directory should be root of the ${zip.basename} install.

java -Xms128m -Xmx1024m -cp lib;lib/nxt.jar;lib/jdom.jar;lib/JMF/lib/jmf.jar;lib/pnuts.jar;lib/resolver.jar;lib/xalan.jar;lib/xercesImpl.jar;lib/xml-apis.jar;lib/jmanual.jar;lib/jh.jar;lib/helpset.jar;lib/poi.jar;lib/eclipseicons.jar;lib/icons.jar;lib/forms.jar;lib/looks.jar;lib/necoderHelp.jar;lib/videolabelerHelp.jar;lib/dacoderHelp.jar;lib/testcoderHelp.jar;lib/prefuse.jar ${script.class} %*
		</echo>
		
		<echo file="${script.dir}/${script.name}.sh">#!/bin/bash
# Generated by ant, ${TODAY}
# Note that a Java runtime should be on the path.
# The current directory should be root of the ${zip.basename} install.
# unless you edit this variable to contain the path to your install
# then you can run from anywhere.
NXT="."

# Adjust classpath for running under cygwin.
if [ $OSTYPE = 'cygwin' ]; then
	export CLASSPATH=".;$NXT;$NXT/lib;$NXT/lib/nxt.jar;$NXT/lib/jdom.jar;$NXT/lib/JMF/lib/jmf.jar;$NXT/lib/pnuts.jar;$NXT/lib/resolver.jar;$NXT/lib/xalan.jar;$NXT/lib/xercesImpl.jar;$NXT/lib/xml-apis.jar;$NXT/lib/jmanual.jar;$NXT/lib/jh.jar;$NXT/lib/helpset.jar;$NXT/lib/poi.jar;$NXT/lib/eclipseicons.jar;$NXT/lib/icons.jar;$NXT/lib/forms.jar;$NXT/lib/looks.jar;$NXT/lib/necoderHelp.jar;$NXT/lib/videolabelerHelp.jar;$NXT/lib/dacoderHelp.jar;$NXT/lib/testcoderHelp.jar;$NXT/lib/prefuse.jar"
else
	export CLASSPATH=".:$NXT:$NXT/lib:$NXT/lib/nxt.jar:$NXT/lib/jdom.jar:$NXT/lib/JMF/lib/jmf.jar:$NXT/lib/pnuts.jar:$NXT/lib/resolver.jar:$NXT/lib/xalan.jar:$NXT/lib/xercesImpl.jar:$NXT/lib/xml-apis.jar:$NXT/lib/jmanual.jar:$NXT/lib/jh.jar:$NXT/lib/helpset.jar:$NXT/lib/poi.jar:$NXT/lib/eclipseicons.jar:$NXT/lib/icons.jar:lib/forms.jar:$NXT/lib/looks.jar:$NXT/lib/necoderHelp.jar:$NXT/lib/videolabelerHelp.jar:$NXT/lib/dacoderHelp.jar:$NXT/lib/testcoderHelp.jar:$NXT/lib/prefuse.jar"
fi

java -Xms128m -Xmx1024m ${script.class}
		</echo>

		<echo file="${script.dir}/${script.name}.command">#!/bin/bash
# Generated by ant, ${TODAY}
# Note that a Java runtime should be on the path.
# The current directory should be root of the ${zip.basename} install.
# unless you edit this variable to contain the path to your install
# then you can run from anywhere.

# this magic incantation changes to the directory we're running from
cd "${0%/*}"

NXT="."
FMJHOME="$NXT/lib/fmj"

FMJJARS="$FMJHOME:$FMJHOME/fmj.jar:$FMJHOME/lib:$FMJHOME/lib/jdom.jar:$FMJHOME/lib/jffmpeg-1.1.0.jar:$FMJHOME/lib/jl1.0.jar:$FMJHOME/lib/jogg-0.0.7.jar:$FMJHOME/lib/jorbis-0.0.15.jar:$FMJHOME/lib/lti-civil.jar:$FMJHOME/lib/mp3spi1.9.4.jar:$FMJHOME/lib/tritonus_share.jar:$FMJHOME/lib/vorbisspi1.0.2.jar"

export CLASSPATH=".:$NXT:$NXT/lib:$NXT/lib/nxt.jar:$NXT/lib/pnuts.jar:$NXT/lib/resolver.jar:$NXT/lib/xalan.jar:$NXT/lib/xercesImpl.jar:$NXT/lib/xml-apis.jar:$NXT/lib/jmanual.jar:$NXT/lib/jh.jar:$NXT/lib/helpset.jar:$NXT/lib/poi.jar:$NXT/lib/eclipseicons.jar:$NXT/lib/icons.jar:lib/forms.jar:$NXT/lib/looks.jar:$NXT/lib/necoderHelp.jar:$NXT/lib/videolabelerHelp.jar:$NXT/lib/dacoderHelp.jar:$NXT/lib/testcoderHelp.jar:$NXT/lib/prefuse.jar:$FMJJARS"

# the bootclasspath argument may seem redundant (and it can cause
# problems!) but on some macs, JMF is on the system CLASSPATH and this
# makes sure we override that. Comment / uncomment as necessary!
#java -Xms128m -Xmx512m -Xbootclasspath/p:$CLASSPATH -Djava.library.path="$FMJHOME" ${script.class}
java -Xms128m -Xmx512m -Djava.library.path="$FMJHOME" ${script.class}

		</echo>
	
	</target>

</project>
